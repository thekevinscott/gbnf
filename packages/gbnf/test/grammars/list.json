[
  "-",
  "- a",
  "- a list",
  "- a list of",
  "- a list of cars.",
  "- a list of fruits",
  "- a list of fruits.",
  "- a list of sports.",
  "- a list of cities.",
  "- a list of colors.",
  "- a list of numbers.",
  "- a list of colors.\n-",
  "- a list of car models.",
  "- a list of car brands.",
  "- a list of colors.\n- Add",
  "- a list of music genres.",
  "- a list of fruits.\n- If the",
  "- a list of programming languages.",
  "- a list of fruits.\n- If the input is not",
  "- a list of books.\n- What is the difference",
  "- a list of fruits.\n- If the user enters \"quit\" or",
  "- a list of fruits.\n- For example, if the input is:\n-",
  "- a list of colors.\n- `grocery`: the same as above, but",
  "- a list of fruits.\n- The first item in the returned list",
  "- a list of fruits.\n- If there is no such word, return \"I don't know",
  "- a list of colors.\n- Each item in the returned list has two properties",
  "- a list of fruits.\n- If you want to get all the items from the grocery",
  "- a list of fruits.\n- If the user enters \"exit\", return an empty list.\n- If",
  "- a list of sports.\n- Example:\n-  >>> grocery_list = ['Bread', 'Milk', 'Cheese']",
  "- a list of fruits.\n- If the input is not one of these, return an empty list.\n- The",
  "- a list of fruits.\n- If the input is not one of these, return an empty list.\n- The grocery",
  "- a list of fruits.\n- The function should return the empty list if it fails to find any item",
  "- a list of fruits.\n- Write some code that returns an empty list, so that we can test if the",
  "- a list of cities.\n- If the input is not in any of these categories, return 'Sorry, I don't know that'.",
  "- a list of movies.\n- We'll say that the words in this problem are all lowercase and there is no punctuation.",
  "- a list of fruits.\n- The list should be sorted alphabetically, except that the first item in the list is always \"",
  "- a list of fruits.\n- If the user enters \"quit\", return an empty list.\n- If the user enters anything else, return None.",
  "- a list of fruits.\n- If the user enters \"quit\", return an empty list.\n- If the user enters any other word, ask them to",
  "- a list of fruits.\n- If the input is not one of these, return an empty list.\n- The input can be any string.\n- You may assume that",
  "- a list of fruits.\n- The first argument is the name of the category, and the second argument is a string that contains all items in that",
  "- a list of fruits.\n- If the user enters 'q', quit the program.\n- If the user enters anything else, print an error message and ask again.\n- Use",
  "- a list of programming languages.\n-  Give me one of the following:\n-  the index of the first item in the list that matches my criteria, if there",
  "- a list of planets.\n- What is the purpose of the `if` statement?\n- How can we modify the program to take multiple arguments and concatenate them into one",
  "- a list of fruits.\n- If the user enters \"exit\", return an empty list.\n- If the user enters anything else, return None.\n- The program should ask for input until",
  "- a list of fruits.\n- If the user enters \"quit\", return an empty list.\n- If the user enters anything else, print an error message and ask again.\n- Use a loop to keep asking until the user enters \"quit\".\n- Use a",
  "- a list of fruits.\n- If the user enters \"quit\", return an empty list.\n- If the user enters anything else, return None.\n- The program should ask for input until the user enters \"quit\".\n- Use the `split()` method to split the",
  "- a list of fruits.\n- If the user enters \"exit\", return an empty list.\n- If the user enters anything else, print an error message and ask again.\n- Use a loop to keep asking until the user enters \"exit\".\n- Use a dictionary to store the items",
  "- a list of names.\n- If the parameter is not a string, return me an empty list.\n- If the parameter is \"\", then return me a list with all words in the English language.\n- If the parameter contains only spaces, then return me a list with all words in the English"
]
